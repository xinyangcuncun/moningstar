package com.example.administrator.morningstar.view.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_BEAN".
*/
public class MyBeanDao extends AbstractDao<MyBean, Long> {

    public static final String TABLENAME = "MY_BEAN";

    /**
     * Properties of entity MyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
        public final static Property Filepath = new Property(4, String.class, "filepath", false, "FILEPATH");
        public final static Property Progress = new Property(5, float.class, "progress", false, "PROGRESS");
        public final static Property Downid = new Property(6, int.class, "downid", false, "DOWNID");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    }


    public MyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"STATE\" INTEGER NOT NULL ," + // 3: state
                "\"FILEPATH\" TEXT," + // 4: filepath
                "\"PROGRESS\" REAL NOT NULL ," + // 5: progress
                "\"DOWNID\" INTEGER NOT NULL ," + // 6: downid
                "\"URL\" TEXT);"); // 7: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getState());
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(5, filepath);
        }
        stmt.bindDouble(6, entity.getProgress());
        stmt.bindLong(7, entity.getDownid());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getState());
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(5, filepath);
        }
        stmt.bindDouble(6, entity.getProgress());
        stmt.bindLong(7, entity.getDownid());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyBean readEntity(Cursor cursor, int offset) {
        MyBean entity = new MyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.getInt(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // filepath
            cursor.getFloat(offset + 5), // progress
            cursor.getInt(offset + 6), // downid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setFilepath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProgress(cursor.getFloat(offset + 5));
        entity.setDownid(cursor.getInt(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
